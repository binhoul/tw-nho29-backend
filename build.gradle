buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'org.sgornostal.docker' version "1.4"

group = 'com.thoughtworks.nho'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
	baseName = 'gs-spring-boot-docker'
	version =  '0.1.0'
}

//docker {
//	dependsOn build
//	name "${project.group}/${bootJar.baseName}"
//	files bootJar.archivePath
//	buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
//}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework:spring-jdbc")
	compile("com.h2database:h2")

	compile('com.google.guava:guava:23.0')
	compile('org.apache.commons:commons-lang3:3.6')
	compile('org.apache.commons:commons-collections4:4.1')
	compile('commons-io:commons-io:2.5')
	compile('io.springfox:springfox-swagger2:2.7.0')
	compile('org.projectlombok:lombok:1.16.18')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.3'
	testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.3'
}


task docker(type:Exec) {
	workingDir '.'

	commandLine "docker", "build", ".", "-t", "${project.group}/${bootJar.baseName}","--build-arg","${bootJar.archiveName}"
	//commandLine "docker", "build",".", "-t", "com.thoughtworks.nho/gs-spring-boot-docker","--build-arg","JAR_FILE=build/libs/gs-spring-boot-docker-0.1.0.jar"

	//store the output instead of printing to the console:
	standardOutput = new ByteArrayOutputStream()

	//extension method stopTomcat.output() can be used to obtain the output:
	ext.output = {
		println 'Done'
		println standardOutput.toString()
		return standardOutput.toString()
	}
}